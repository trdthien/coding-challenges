<?php

namespace App\Test\Controller;

use GuzzleHttp\Client;
use PHPUnit\Framework\TestCase;

/**
 * Class ProductControllerTest
 * @package App\Test\Controller
 */
class ProductControllerTest extends TestCase
{
    private $client;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = new Client([
            'base_uri' => 'http://localhost',
            'http_errors' => false,
        ]);
    }

    public function testGetProducts()
    {
        $response = $this->client->get('/api/products', null);

        $this->assertEquals(200, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
        $this->assertArrayHasKey('id', reset($data));
    }

    public function testGetProduct()
    {
        $response = $this->client->get('/api/products/1', null);

        $this->assertEquals(200, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
        $this->assertArrayHasKey('id', $data);
    }

    public function testNotFoundProduct()
    {
        $response = $this->client->get('/api/products/9999', null);

        $this->assertEquals(404, $response->getStatusCode());
    }


    public function testAnonymousUserMustNotAccessCreateProduct()
    {
        $response = $this->client->post('/api/products', [
            'body' => '{}'
        ]);

        $this->assertEquals(401, $response->getStatusCode());
    }



    public function testCreateProduct()
    {
        $requestData = array(
            'name' => $name = 'product-' . uniqid(),
            'sku' => $sku = $name . '-sku',
            'quantity' => rand(1, 100),
            'category' => 'something',
        );

        $token = $this->createToken('bobby@foo.com', 'Bobby Fischer');

        $response = $this->client->post('/api/products', [
            'body' => json_encode($requestData),
            'headers' => [
                'Authorization' => 'Bearer '.$token
            ]
        ]);

        $this->assertEquals(201, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
        $this->assertArrayHasKey('name', $data);
        $this->assertEquals($data['name'], $name);
    }

    public function testPutProduct()
    {
        $requestData = array(
            'name' => $name = 'product-' . uniqid(),
            'sku' => $sku = $name . '-sku',
            'quantity' => rand(1, 100),
            'category' => 'something',
            'price' => rand(19, 99)
        );

        $token = $this->createToken('bobby@foo.com', 'Bobby Fischer');

        $response = $this->client->post('/api/products', [
            'body' => json_encode($requestData),
            'headers' => [
                'Authorization' => 'Bearer '.$token
            ]
        ]);

        $data = json_decode($response->getBody(true), true);

        $updateData = [];

        // set new values to test update
        $updateData['quantity'] = $newQuantity = rand(101, 201);
        $updateData['name'] = 'new-' . $data['name'];
        $updateData['sku'] = 'new-' . $data['sku'];
        $updateData['category'] = 'new-category';
        $updateData['price'] = rand(100, 199);

        $response = $this->client->put(
            sprintf('/api/products/%s', $data['id']),
            [
                'body' => json_encode($updateData),
                'headers' => [
                    'Authorization' => 'Bearer '.$token
                ]
            ]
        );

        $this->assertEquals(200, $response->getStatusCode());
        $data = json_decode($response->getBody(true), true);
        $this->assertArrayHasKey('name', $data);
        $this->assertEquals($newQuantity, $updateData['quantity']);
    }

    protected function createToken($username = 'user', $password = 'password')
    {
        $response = $this->client->post(
            '/api/login_check',[
                'body' => json_encode([
                    'username' => $username,
                    'password' => $password
                ])
            ]
        );

        $data = json_decode($response->getBody(true), true);

        return $data['token'];
    }
}